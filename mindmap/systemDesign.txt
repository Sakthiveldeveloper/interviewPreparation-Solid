1. Basics
   ├── What is System Design?
   ├── High-Level Design (HLD) vs Low-Level Design (LLD)
   ├── Functional vs Non-Functional Requirements
   ├── Monolithic vs Microservices Architecture
   └── Scalability, Reliability, Maintainability

2. Architectural Patterns
   ├── Client-Server
   ├── Layered Architecture
   ├── Microservices
   ├── Event-Driven Architecture
   ├── Service-Oriented Architecture (SOA)
   ├── Peer-to-Peer (P2P)
   └── Serverless Architecture

3. System Components
   ├── Web Servers (Nginx, Apache)
   ├── Application Servers
   ├── Databases
       ├── Relational (MySQL, PostgreSQL)
       └── NoSQL (MongoDB, Cassandra, Redis)
   ├── Message Brokers (Kafka, RabbitMQ)
   ├── Cache (Redis, Memcached)
   ├── Load Balancer
   ├── API Gateway
   └── Storage (Block, Object, File)

4. Scalability
   ├── Horizontal vs Vertical Scaling
   ├── Load Balancing
   ├── Sharding
   ├── Partitioning
   ├── Replication
   └── Database Scaling Strategies

5. Caching
   ├── Client-Side Caching
   ├── CDN (Content Delivery Network)
   ├── Database Caching
   ├── Application-Level Caching
   ├── Cache Eviction Policies (LRU, LFU, FIFO)
   └── Write-Through vs Write-Back vs Write-Around

6. Databases
   ├── CAP Theorem
   ├── SQL vs NoSQL
   ├── Indexing
   ├── Query Optimization
   ├── Transactions & ACID
   └── Eventual Consistency

7. Data Modeling
   ├── ER Diagrams
   ├── Normalization & Denormalization
   ├── Document & Key-Value Models
   └── Graph Databases

8. Networking
   ├── HTTP vs HTTPS
   ├── WebSockets
   ├── gRPC
   ├── DNS
   ├── REST APIs vs GraphQL
   ├── API Rate Limiting
   └── CDN Basics

9. Security
   ├── Authentication (OAuth, JWT, SSO)
   ├── Authorization (RBAC, ABAC)
   ├── Data Encryption (At Rest, In Transit)
   ├── HTTPS/TLS
   ├── CSRF, XSS, SQL Injection Prevention
   └── API Security Best Practices

10. Messaging & Queues
    ├── Asynchronous Processing
    ├── Pub/Sub Model
    ├── Kafka, RabbitMQ, SQS
    ├── Dead Letter Queues
    └── Event Sourcing

11. Logging & Monitoring
    ├── Centralized Logging
    ├── Metrics Collection (Prometheus, Grafana)
    ├── Distributed Tracing
    ├── Alerts & Notifications
    └── Error Tracking (Sentry, ELK Stack)

12. Availability & Reliability
    ├── High Availability (HA)
    ├── Fault Tolerance
    ├── Failover & Disaster Recovery
    ├── Redundancy
    ├── Backups & Restore
    └── SLA, SLO, SLI

13. Performance Optimization
    ├── Profiling
    ├── Query Optimization
    ├── Caching Strategies
    ├── Asynchronous Processing
    ├── CDN Usage
    └── Code & Infra Optimization

14. Design Principles
    ├── SOLID Principles
    ├── DRY, KISS, YAGNI
    ├── Twelve-Factor App
    ├── API Design Best Practices
    └── Idempotency

15. Real-World System Design Examples
    ├── Design a URL Shortener (Bitly)
    ├── Design a Social Media Feed
    ├── Design an E-commerce Platform
    ├── Design a Messaging Service (WhatsApp)
    ├── Design a Video Streaming Service (YouTube/Netflix)
    └── Design a Ride-Sharing App (Uber)

16. Trade-offs & Considerations
    ├── Latency vs Throughput
    ├── Consistency vs Availability (CAP)
    ├── Cost vs Performance
    ├── Build vs Buy Decisions
    └── Complexity vs Maintainability
